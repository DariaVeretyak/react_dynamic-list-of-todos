{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","response","ok","Error","status","statusText","json","TodoList","todos","selectUser","selectedUserId","useState","newTodos","setNewTodos","query","setQuery","select","setSelect","useEffect","todosFilter","filter","todo","title","toLowerCase","includes","completed","todosSelect","className","type","value","onChange","event","target","map","classNames","readOnly","checked","userId","onClick","id","CurrentUser","clearUser","user","setUser","name","email","phone","App","setSelectedUserId","setTodos","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae8cb027.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => request('/todos');\n\nexport const getUserbyId = (userId: number) => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todos } from '../../types/Todos';\nimport './TodoList.scss';\n\ninterface Props {\n  selectUser: (userId:number) => void,\n  todos: Todos[],\n  selectedUserId: number,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [newTodos, setNewTodos] = useState(todos);\n  const [query, setQuery] = useState('');\n  const [select, setSelect] = useState('all');\n\n  useEffect(() => {\n    const getTodosFilter = () => {\n      return todos.filter(\n        todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    };\n\n    const todosFilter = getTodosFilter();\n\n    const todosSelect = () => {\n      switch (select) {\n        case 'active':\n          return todosFilter.filter(todo => !todo.completed);\n          break;\n        case 'completed':\n          return todosFilter.filter(todo => todo.completed);\n          break;\n        default:\n          return todosFilter;\n      }\n    };\n\n    setNewTodos(todosSelect());\n  }, [todos, query, select]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <div className=\"TodoList__form\">\n          <label>\n            <input\n              className=\"TodoList__input\"\n              type=\"text\"\n              data-cy=\"filterByTitle\"\n              value={query}\n              onChange={event => setQuery(event.target.value)}\n            />\n            <span>&#128269;</span>\n          </label>\n          <select\n            value={select}\n            onChange={(event) => setSelect(event.target.value)}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {newTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={\n                classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )\n              }\n            >\n              <label>\n                {todo.completed ? (\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked\n                  />\n                ) : (\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                )}\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n              <button\n                className={\n                  classNames(\n                    'TodoList__user-button button',\n                    {\n                      'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                    },\n                  )\n                }\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={\n                  () => {\n                    selectUser(todo.userId);\n                  }\n                }\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { User } from '../../types/User';\nimport { getUserbyId } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number,\n  clearUser: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId, clearUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUserbyId(selectedUserId)\n      .then(setUser);\n  }, [selectedUserId]);\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <button\n            type=\"button\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    getTodos().then(data => setTodos(data));\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectUser={(userId) => {\n            setSelectedUserId(userId);\n          }}\n          todos={todos}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              clearUser={() => {\n                setSelectedUserId(0);\n              }}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}